
#------------비트 연산 기본 ---------------#
# & : 비트 단위로 AND연산을 한다.
# | : 비트 단위로 OR연산을 한다.
# << : 왼쪽으로 비트 이동
# >> : 오른쪽으로 비트 이동
n = 10
print(1 << n) #원소가 n개일 때 모든 부분집합의 수
print(10 & (1 << 2)) # 10의 2번째 비트가 1인지를 리턴

arr = [3, 6, 7, 1, 5, 4]
n = len(arr)

for i in range(1 << n): #부분집합의 개수만큼 생성 6개니까 0 ~ 63(000000부터 111111)까지의 비트를 비교
    subset = []
    for j in range(n+1): #원소의 수만큼 비트를 비교할 예정
        if i & (1<<j): #특정 비트(110010)가 각 index(0~6)만큼 비트를 옮겼을 떄 일치한다면(3, 6, 5) subset에 넣는다.
            subset.append(str(arr[j]))
    print(' '.join(subset))
print()
